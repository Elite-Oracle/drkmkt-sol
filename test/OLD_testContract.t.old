// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "../src/DarkMarketAuction.sol";
import "./MockERC20.t.sol";
import "./MockERC721.t.sol";
import "./MockERC1155.t.sol";
import "../src/interfaces/IDarkMarketAuctionStructures.sol";

contract DarkMarketAuctionTest is Test, IDarkMarketAuctionStructures {
    DarkMarketAuction public auctionContract;
    MockERC20 public erc20;
    MockERC721 public erc721;
    MockERC1155 public erc1155;

    address user1 = address(1);
    address user2 = address(2);
    address user3 = address(3);

    function setUp() public {
        // Deploy the auction contract
        auctionContract = new DarkMarketAuction();

        // Check if the contract is deployed successfully
        assertTrue(address(auctionContract) != address(0), "Auction contract deployment failed.");

        // Initialize the auction contract and check for errors
        try auctionContract.initialize() {
            // If initialization is successful, proceed with the rest of the setup
            // Deploy mock tokens
            erc20 = new MockERC20(1000000);
            erc721 = new MockERC721("Mock ERC721", "MERC721");
            erc1155 = new MockERC1155("Mock ERC1155");

            // Mint and approve for each user
            mintAndApprove(user1, 1, 1000 ether, 10);
            mintAndApprove(user2, 2, 500 ether, 20);
            mintAndApprove(user3, 3, 250 ether, 30);
        } catch Error(string memory reason) {
            // Catch any revert messages from the initialize function
            emit log("Initialization failed with error: ");
            emit log(reason);
            fail();
        } catch (bytes memory lowLevelData) {
            // Catch low-level reverts (e.g., assert, out-of-gas, etc.)
            emit log("Initialization failed with low-level error: ");
            emit log_bytes(lowLevelData);
            fail();
        }

        // Deploy mock tokens
        erc20 = new MockERC20(1000000);
        erc721 = new MockERC721("Mock ERC721", "MERC721");
        erc1155 = new MockERC1155("Mock ERC1155");


        // Mint and approve for each user
        mintAndApprove(user1, 1, 1000 ether, 10);
        mintAndApprove(user2, 2, 500 ether, 20);
        mintAndApprove(user3, 3, 250 ether, 30);
    }

    function mintAndApprove(address user, uint256 tokenId, uint256 erc20Amount, uint256 erc1155Amount) internal {
        // Mint tokens
        vm.prank(user);
        erc20.mint(user, erc20Amount);
        erc721.mint(user, tokenId);
        erc1155.mint(user, tokenId, erc1155Amount, "");

        // Approve the auction contract to spend tokens on behalf of the user
        vm.prank(user);
        erc20.approve(address(auctionContract), erc20Amount);
        erc721.setApprovalForAll(address(auctionContract), true);
        erc1155.setApprovalForAll(address(auctionContract), true);
    }

function testStartAuction() public {
    // Arrange
    uint256 startPrice = 1 ether;
    uint32 duration = 1 days; // Ensure this is within the min and max duration limits of the contract
    TokenDetail[] memory tokens = new TokenDetail[](1); // Adjust the size as needed
    address ERC20forBidding = address(erc20); // Assuming erc20 is the ERC20 token used for bidding
    FeeDetail memory fees = FeeDetail({contractFee: 100, royaltyFee: 100, royaltyAddress: address(2)}); // Example fees

    // Assuming you have a function to create a TokenDetail and the structure is known
    tokens[0] = createTokenDetail(address(erc721), 1, TokenType.ERC721, 1); // Example for ERC721

    // Act
    uint256 auctionId = auctionContract.startAuction(startPrice, duration, tokens, ERC20forBidding, fees);

    // Assert
    Auction memory auction = auctionContract.auctions(auctionId);
    assertEq(auction.seller, address(this)); // Assuming the test contract itself is the seller
    assertEq(auction.highestBid, startPrice);
    assertEq(auction.endTime, uint32(block.timestamp) + duration);
    // assertEq(auction.status, AuctionStatus.Open);
    assertEq(auction.bidTokenAddress, ERC20forBidding);
    // ... additional assertions for fees and tokens ...
}

// Helper function to create a TokenDetail (adjust according to your contract's definition)
function createTokenDetail(address tokenAddress, uint256 tokenId, TokenType tokenType, uint256 tokenQuantity) internal pure returns (TokenDetail memory) {
    return TokenDetail({
        tokenAddress: tokenAddress,
        tokenId: tokenId,
        tokenType: tokenType,
        tokenQuantity: tokenQuantity
    });
}


}
