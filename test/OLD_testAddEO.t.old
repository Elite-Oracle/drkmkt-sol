// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "forge-std/Test.sol";
import "forge-std/Vm.sol";
import "../src/DarkMarketAuction.sol";
import "../src/lib/EliteOracleAccessManager.sol";
import "./MockERC20.t.sol";
import "./MockERC721.t.sol";
import "./MockERC1155.t.sol";
import "../src/interfaces/IDarkMarketAuctionStructures.sol";

contract TestAddressBookAndAccessManager is Test {
    EliteOracleAccessManager eliteOracleAccessManager;

    function setUp() public {
        console.log("Setting Up");
        eliteOracleAccessManager = new EliteOracleAccessManager();
            console.log("Setting Up More");
        eliteOracleAccessManager.initialize();
                console.log("Setting Up FINISHED");
    }

    function testAccessManagerAddress() public {
                console.log("Testing Access 1");
        address expectedAccessManager = address(eliteOracleAccessManager);
        console.log("Testing Access 2");
        assertEq(AddressBook.accessManager(), expectedAccessManager, "AccessManager address should match the deployed EliteOracleAccessManager address.");
        console.log("Testing Access FINISHED");
    }

    function testTreasuryAddress() public {
        console.log("Treasury Setup");
        address expectedTreasuryAddress = 0x419C3657532aaD16955291AF7942fea9A1b6d010;
        assertEq(AddressBook.treasury(), expectedTreasuryAddress, "Treasury address should match the expected address.");
    }

    function testChainNotConfiguredError() public {
        vm.prank(address(0));
        // vm.Revert("ChainNotConfigured");
        AddressBook.accessManager();
    }

    // Add more tests as needed...
}